 package simulation;import banking.AccountInformation;import banking.Balances;import banking.Card;import banking.Message;import banking.Money;import banking.Status;import banking.BankHandler;public class SimulatedBank{	public SimulatedBank()	{		isBankConfirmed = true;			}        public Status handleMessage(Message message, Balances balances)    {        	        int cardNumber = message.getCard().getNumber();         if (cardNumber < 1 || cardNumber > PIN.length)            return new Failure("Invalid card");            if (message.getPIN() != PIN [ cardNumber ] )            return new InvalidPIN();        //isBankConfirmed(bankHandler);                       if (!isBankConfirmed)        	return new Failure("Bank Terminate Operator");                switch(message.getMessageCode())        {            case Message.WITHDRAWAL:                            return withdrawal(message, balances);                                        case Message.INITIATE_DEPOSIT:                            return initiateDeposit(message);                        case Message.COMPLETE_DEPOSIT:                            return completeDeposit(message, balances);                        case Message.TRANSFER:                            return transfer(message, balances);                        case Message.INQUIRY:                            return inquiry(message, balances);        }                                return null;    }       private Status withdrawal(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");            Money amount = message.getAmount();                Money limitRemaining = new Money(DAILY_WITHDRAWAL_LIMIT);        limitRemaining.subtract(WITHDRAWALS_TODAY[ cardNumber ]);        if (! amount.lessEqual(limitRemaining))            return new Failure("Daily withdrawal limit exceeded");        if (! amount.lessEqual(AVAILABLE_BALANCE [ accountNumber ]))             return new Failure("Insufficient available balance");                            WITHDRAWALS_TODAY [ cardNumber ].add(amount);        BALANCE [ accountNumber ].subtract(amount);        AVAILABLE_BALANCE [ accountNumber ].subtract(amount);                              balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }            private Status initiateDeposit(Message message)    {        int cardNumber = message.getCard().getNumber();             int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                                        return new Success();    }                private Status completeDeposit(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                 int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                                    Money amount = message.getAmount();        BALANCE [ accountNumber ].add(amount);                                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }               private Status transfer(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();             int fromAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (fromAccountNumber == 0)            return new Failure("Invalid from account type");            int toAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (toAccountNumber == 0)            return new Failure("Invalid to account type");        if (fromAccountNumber == toAccountNumber)            return new Failure("Can't transfer money from\n" +                    "an account to itself");            Money amount = message.getAmount();                if (! amount.lessEqual(AVAILABLE_BALANCE [ fromAccountNumber ]))             return new Failure("Insufficient available balance");                           BALANCE [ fromAccountNumber ].subtract(amount);        AVAILABLE_BALANCE [ fromAccountNumber ].subtract(amount);        BALANCE [ toAccountNumber ].add(amount);        AVAILABLE_BALANCE [ toAccountNumber ].add(amount);                              balances.setBalances(BALANCE [ toAccountNumber ],                              AVAILABLE_BALANCE [ toAccountNumber ]);                return new Success();    }            private Status inquiry(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();         int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }               private static class Success extends Status    {        public boolean isSuccess()        {            return true;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return null;        }    }            private static class Failure extends Status    {               public Failure(String message)        {            this.message = message;        }                public boolean isSuccess()        {            return false;        }                public boolean isInvalidPIN()        {            return false;        }                public String getMessage()        {            return message;        }                private String message;    }        private static class InvalidPIN extends Failure    {                public InvalidPIN()        {            super("Invalid PIN");        }                public boolean isInvalidPIN()        {            return true;        }    }           private static final int PIN [] =    {         0,          42,         1234     };       private static final int ACCOUNT_NUMBER [] [] =    {         { 0, 0, 0 },            { 1, 2, 0 },        { 1, 0, 3 }    };        private static Money WITHDRAWALS_TODAY [] =    {        new Money(0),           new Money(0),        new Money(0)    };            private static final Money DAILY_WITHDRAWAL_LIMIT = new Money(300);            private Money BALANCE [] =    {        new Money(0),           new Money(100),         new Money(1000),        new Money(5000)     };            private Money AVAILABLE_BALANCE [] =    {         new Money(0),           new Money(100),         new Money(1000),        new Money(5000)     };        private boolean isBankConfirmed;        }    