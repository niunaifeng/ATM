 package simulation;import java.awt.*;import java.awt.event.*;class SimEnvelopeAcceptor extends Button{        SimEnvelopeAcceptor()    {        super("Click to insert envelope");        changeDayMode();        addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e)            {                synchronized(SimEnvelopeAcceptor.this)                {                    inserted = true;                    SimEnvelopeAcceptor.this.notify();                }            }        });    }           public synchronized boolean acceptEnvelope()    {        inserted = false;        setVisible(true);                           try        {             wait(MAXIMUM_WAIT_TIME);        }        catch(InterruptedException e)        { }                if (inserted)        {                                   Rectangle originalBounds = getBounds();                        Rectangle currentBounds =               new Rectangle(originalBounds.x, originalBounds.y,                             originalBounds.width, originalBounds.height);                                         while (currentBounds.width > 0 && currentBounds.height > 0)            {                 setBounds(currentBounds.x, currentBounds.y,                        currentBounds.width, currentBounds.height);                repaint();                try                 {                     Thread.sleep(100);                }                 catch (InterruptedException e)                 { }                currentBounds.height -= 1;                currentBounds.width =                   (originalBounds.width * currentBounds.height) / originalBounds.height;                currentBounds.x =                  originalBounds.x + (originalBounds.width - currentBounds.width) / 2;                currentBounds.y =                  originalBounds.y + (originalBounds.height - currentBounds.height) / 2;            }                        setVisible(false);            setBounds(originalBounds);        }        else        {            setVisible(false);        }        return inserted;    }        public synchronized void cancelRequested()    {        notify();           }        public void changeNightMode()    {    	this.setBackground(Color.black);    	this.setForeground(Color.white);    }        public void changeDayMode()    {    	this.setBackground(new Color(242,242,242));    	this.setForeground(Color.black);    }      private boolean inserted;        private static long MAXIMUM_WAIT_TIME = 20 * 1000;}                                       