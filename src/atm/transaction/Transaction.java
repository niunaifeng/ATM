 package atm.transaction;import atm.ATM;import atm.Session;import atm.physical.*;import banking.Balances;import banking.Card;import banking.Message;import banking.Status;import banking.Receipt;public abstract class Transaction{            protected Transaction(ATM atm, Session session, Card card, int pin)    {        this.atm = atm;        this.session = session;        this.card = card;        this.pin = pin;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();                        state = GETTING_SPECIFICS_STATE;    }                 public static Transaction makeTransaction(ATM atm, Session session,                                              Card card, int pin)                                throws CustomerConsole.Cancelled                  {        int choice = atm.getCustomerConsole().readMenuChoice(                "Please choose transaction type", TRANSACTION_TYPES_MENU);                        switch(choice)        {            case 0:                            return new Withdrawal(atm, session, card, pin);                            case 1:                            return new Deposit(atm, session, card, pin);                            case 2:                            return new Transfer(atm, session, card, pin);                            case 3:                            return new Inquiry(atm, session, card, pin);                            default:                            return null;    // To keep compiler happy - should not happen!        }    }           public boolean performTransaction() throws CardRetained    {        String doAnotherMessage = "";        Status status = null;        Receipt receipt = null;                while (true)            {            switch(state)            {                case GETTING_SPECIFICS_STATE:                	                    try                    {                                   message = getSpecificsFromCustomer();                                                atm.getCustomerConsole().display("");                        state = SENDING_TO_BANK_STATE;                    }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case SENDING_TO_BANK_STATE:                	                              status = atm.getNetworkToBank().sendMessage(message, balances);                                    if (status.isInvalidPIN())                        state = INVALID_PIN_STATE;                    else if (status.isSuccess())                                            {                    	//state = COMPLETING_TRANSACTION_STATE;                    	state = BANK_CONFIRM_STATE;                    	atm.getCustomerConsole().showWaiting();           	                    }                    else                    {                        doAnotherMessage = status.getMessage();                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                case INVALID_PIN_STATE:                	                    try                    {                        status = performInvalidPINExtension();                                                                                          if (status.isSuccess())                            state = COMPLETING_TRANSACTION_STATE;                        	                        else                        {                            doAnotherMessage = status.getMessage();                            state = ASKING_DO_ANOTHER_STATE;                        }                    }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                    break;                case BANK_CONFIRM_STATE:                		try                		{               			                			atm.getCustomerConsole().readBankHandle();                			state = COMPLETING_TRANSACTION_STATE;                		}                		catch(CustomerConsole.Terminate e)                		{                			doAnotherMessage = "Bank Terminate Transaction";                    		state = ASKING_DO_ANOTHER_STATE;                		}             		                		             	                	break;                                case COMPLETING_TRANSACTION_STATE:                    try                    {                        receipt = completeTransaction();                        state = PRINTING_RECEIPT_STATE;                                            }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case PRINTING_RECEIPT_STATE:                	                    atm.getReceiptPrinter().printReceipt(receipt);                    state = ASKING_DO_ANOTHER_STATE;                                        break;                                    case ASKING_DO_ANOTHER_STATE:                                    if (doAnotherMessage.length() > 0)                        doAnotherMessage += "\n";                                            try                    {                        String [] yesNoMenu = { "Yes", "No" };                        boolean doAgain = atm.getCustomerConsole().readMenuChoice(                            doAnotherMessage +                             "Would you like to do another transaction?",                            yesNoMenu) == 0;                        return doAgain;                    }                    catch(CustomerConsole.Cancelled e)                    {                        return false;                    }            }        }    }                   public Status performInvalidPINExtension() throws CustomerConsole.Cancelled,                                                      CardRetained    {        Status status = null;        for (int i = 0; i < 3; i ++)        {            pin = atm.getCustomerConsole().readPIN(                "PIN was incorrect\nPlease re-enter your PIN\n" +                "Then press ENTER");            atm.getCustomerConsole().display("");                        message.setPIN(pin);            status = atm.getNetworkToBank().sendMessage(message, balances);            if (! status.isInvalidPIN())            {                session.setPIN(pin);                return status;            }        }                atm.getCardReader().retainCard();        atm.getCustomerConsole().display(            "Your card has been retained\nPlease contact the bank.");        try        {            Thread.sleep(5000);        }        catch(InterruptedException e)        { }        atm.getCustomerConsole().display("");                        throw new CardRetained();    }            public int getSerialNumber()    {        return serialNumber;    }            protected abstract Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled;            protected abstract Receipt completeTransaction() throws CustomerConsole.Cancelled;                public static class CardRetained extends Exception    {                public CardRetained()        {            super("Card retained due to too many invalid PINs");        }    }               protected ATM atm;            protected Session session;            protected Card card;            protected int pin;            protected int serialNumber;            protected Message message;            protected Balances balances;           private static final String [] TRANSACTION_TYPES_MENU =         { "Withdrawal", "Deposit", "Transfer", "Balance Inquiry" };               private static int nextSerialNumber = 1;           private int state;                    private static final int GETTING_SPECIFICS_STATE = 1;           private static final int SENDING_TO_BANK_STATE = 2;            private static final int INVALID_PIN_STATE = 3;            private static final int COMPLETING_TRANSACTION_STATE = 4;           private static final int PRINTING_RECEIPT_STATE = 5;            private static final int ASKING_DO_ANOTHER_STATE = 6;        private static final int BANK_CONFIRM_STATE = 7;}