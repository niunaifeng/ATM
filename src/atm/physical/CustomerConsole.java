 package atm.physical;import banking.Money;import banking.Status;import simulation.Simulation; public class CustomerConsole{        public CustomerConsole()    {    }       public void display(String message)    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(message);    }          public int readPIN(String prompt) throws Cancelled    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(prompt);        Simulation.getInstance().display("");                String input = Simulation.getInstance().readInput(Simulation.PIN_MODE, 0);                Simulation.getInstance().clearDisplay();                if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input);    }           public synchronized int readMenuChoice(String prompt, String[] menu) throws Cancelled    {    	        Simulation.getInstance().clearDisplay();                Simulation.getInstance().display(prompt);                for (int i = 0; i < menu.length; i ++)            Simulation.getInstance().display((i+1) + ") " + menu[i]);                String input =             Simulation.getInstance().readInput(Simulation.MENU_MODE, menu.length);                    Simulation.getInstance().clearDisplay();                        if (input == null)            throw new Cancelled();        else            return Integer.parseInt(input) - 1;    }    public synchronized boolean readBankHandle() throws Terminate {    	boolean result =  Simulation.getInstance().readBankHandleResult();    	if (result == false)    		throw new Terminate();    	else    		return result;    }        public synchronized Money readAmount(String prompt) throws Cancelled    {        Simulation.getInstance().clearDisplay();        Simulation.getInstance().display(prompt);        Simulation.getInstance().display("");                String input = Simulation.getInstance().readInput(Simulation.AMOUNT_MODE, 0);                Simulation.getInstance().clearDisplay();                if (input == null)            throw new Cancelled();        else        {            int dollars = Integer.parseInt(input) / 100;            int cents = Integer.parseInt(input) % 100;            return new Money(dollars, cents);        }    }        public void showWaiting()    {    	Simulation.getInstance().clearDisplay();    	Simulation.getInstance().display("Waiting for bank to handle");    }    public static class Cancelled extends Exception    {                public Cancelled()        {            super("Cancelled by customer");        }    }    public static class Terminate extends Exception    {    	public Terminate()    	{    		super("Terminated by bank");    	}    }}